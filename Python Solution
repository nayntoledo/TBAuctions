import pandas as pd

# load the provided CSV files
auctions_df = pd.read_csv('C:/Users/Nayane/Downloads/tbauctions/auctions.csv')
bids_df = pd.read_csv('C:/Users/Nayane/Downloads/tbauctions/bids.csv)
buyers_df = pd.read_csv('C:/Users/Nayane/Downloads/tbauctions/buyers.csv')

# display the first few rows of each dataframe to inspect the data
auctions_head = auctions_df.head()
bids_head = bids_df.head()
buyers_head = buyers_df.head()

auctions_head, bids_head, buyers_head


# checking and cleaning the auctions data
# rename columns for consistency
auctions_df.columns = auctions_df.columns.str.lower()

# check for missing values
auctions_missing = auctions_df.isnull().sum()

# drop duplicates
auctions_df_cleaned = auctions_df.drop_duplicates()

bids_df.columns = bids_df.columns.str.lower()
bids_missing = bids_df.isnull().sum()
bids_df_cleaned = bids_df.drop_duplicates()


buyers_df.columns = buyers_df.columns.str.lower()
buyers_missing = buyers_df.isnull().sum()
buyers_df_cleaned = buyers_df.drop_duplicates()

auctions_missing, bids_missing, buyers_missing, auctions_df_cleaned.head(), bids_df_cleaned.head(), buyers_df_cleaned.head()

# Auctions Data:
# No missing values.
# No duplicates after initial cleaning.

# Bids Data:
# Some missing values in 'bid' and 'bidder' columns.
# No duplicates after initial cleaning.

# Buyers Data:
# One missing value in 'username'.
# No duplicates after initial cleaning.


# solving missing values
# drop rows with missing 'bid' and 'bidder' in bids data
bids_df_cleaned = bids_df_cleaned.dropna(subset=['bid', 'bidder'])
# drop the row with missing 'username' in buyers data
buyers_df_cleaned = buyers_df_cleaned.dropna(subset=['username'])

# create dimension tables
# buyers dimension table
buyers_dim = buyers_df_cleaned[['buyerid', 'name', 'email', 'username']].rename(columns={'buyerid': 'id'})
# auctions/sellers dimension table (extracting unique sellers from auctions data)
sellers_dim = auctions_df_cleaned[['seller_id', 'seller_name', 'seller_email', 'seller_username']].drop_duplicates()
# items dimension table
items_dim = auctions_df_cleaned[['itemid', 'item_name', 'item_description']].drop_duplicates()

# create fact tables
# # auction Transactions fact table
# auction_transactions_fact = auctions_df_cleaned[['auctionid', 'auction_type', 'seller_id']]
# bid details fact table
bid_details_fact = bids_df_cleaned[['auctionid', 'bid', 'bidder', 'openbid', 'price', 'item', 'auction_type', 'datetime', 'itemid', 'item_description']]

# display the cleaned and transformed dataframes
buyers_dim.head(), sellers_dim.head(), auction_transactions_fact.head(), bid_details_fact.head()

# merge fact_bids with dim_auction to get complete auction details
auction_bids_merged = pd.merge(fact_bids, dim_auction, on='auctionid', how='inner')
# merge with buyers to get buyer details
auction_bids_with_buyers = pd.merge(auction_bids_merged, dim_buyer, left_on='bidder', right_on='username', how='inner')
# merge with sellers to get seller details
final_auction_data = pd.merge(auction_bids_with_buyers, dim_seller, on='seller_id', how='inner', suffixes=('_buyer', '_seller'))

# calculate total revenue by buyer
buyer_revenue = final_auction_data.groupby('username_buyer')['price'].sum().reset_index().rename(columns={'price': 'total_revenue'}).sort_values(by='total_revenue', ascending=False)
# calculate total revenue by seller
seller_revenue = final_auction_data.groupby('seller_username')['price'].sum().reset_index().rename(columns={'price': 'total_revenue'}).sort_values(by='total_revenue', ascending=False)
# calculate the success of auction types by counting the number of bids
auction_type_success = final_auction_data.groupby('auction_type')['bid'].count().reset_index().rename(columns={'bid': 'total_bids'}).sort_values(by='total_bids', ascending=False)

import ace_tools as tools; tools.display_dataframe_to_user(name="Buyer Revenue", dataframe=buyer_revenue)
tools.display_dataframe_to_user(name="Seller Revenue", dataframe=seller_revenue)
tools.display_dataframe_to

buyer_revenue.head(), seller_revenue.head(), auction_type_success.head()


## Generate Visuals
plt.figure(figsize=(15, 10))

# top buyers by revenue
plt.subplot(3, 1, 1)
plt.bar(buyer_revenue['username_buyer'], buyer_revenue['total_revenue'])
plt.title('Top Buyers by Revenue')
plt.xlabel('Buyer Username')
plt.ylabel('Total Revenue')
plt.xticks(rotation=45)

# Most Successful Auction Types
plt.subplot(3, 1, 2)
plt.bar(auction_type_success['auction_type'], auction_type_success['total_bids'])
plt.title('Most Successful Auction Types')
plt.xlabel('Auction Type')
plt.ylabel('Total Bids')
plt.xticks(rotation=45)

# top sellers by revenue
plt.subplot(3, 1, 3)
plt.bar(seller_revenue['seller_username'], seller_revenue['total_revenue'])
plt.title('Top Performing Sellers by Revenue')
plt.xlabel('Seller Username')
plt.ylabel('Total Revenue')
plt.xticks(rotation=45)

plt.tight_layout()
plt.savefig('C:/Users/Nayane/Downloads/tbauctions/auction_analysis_charts.png')
plt.show()
